#ifndef SNOWFLAKE_VULKAN_HPP
#define SNOWFLAKE_VULKAN_HPP

// Vulkan SDK
#include <vulkan/vulkan.h>

// Vulkan Includes
#include "renderer/vk/Device.hpp"
#include "renderer/vk/Swapchain.hpp"
#include "renderer/vk/Buffer.hpp"
#include "renderer/vk/Image.hpp"
#include "renderer/vk/CommandPool.hpp"
#include "renderer/vk/vkUtil.hpp"
#include "renderer/vk/vkPlatform.hpp"

// Misc
#include "core/Logging.hpp"
#include "core/Abort.hpp"

// NOTE(WSWhitehouse): Defining VK_VALIDATION when in a debug build...
#if defined(_DEBUG) || defined(_REL_DEBUG)
#define VK_VALIDATION 1
#endif

/**
* @brief Checks a VkResult variable for success. On failure
* the program will abort with abort code `VK_FAILURE`.
*/
#define VK_SUCCESS_CHECK(expr)                            \
  do { VkResult _result_ = (expr);                        \
    if(_result_ != VK_SUCCESS) {                          \
      LOG_IMMEDIATE(::Logging::LogLevel::LOG_LEVEL_FATAL, \
        "VK_SUCCESS_CHECK FAILED! Result: %i (%s)",       \
        _result_, VkResultToString(_result_));            \
      ABORT(ABORT_CODE_VK_FAILURE);                       \
    } } while(false)

/**
 * @brief Maximum number of frames in flight, used primarily by the renderer.
 */
#define MAX_FRAMES_IN_FLIGHT 3

/**
* @brief Returns the string representation of the VkResult.
*/
constexpr INLINE const char* VkResultToString(VkResult result)
{
  #define VK_RESULT_STR_CASE(result) case result: return #result

  switch (result)
  {
    VK_RESULT_STR_CASE(VK_SUCCESS);
    VK_RESULT_STR_CASE(VK_NOT_READY);
    VK_RESULT_STR_CASE(VK_TIMEOUT);
    VK_RESULT_STR_CASE(VK_EVENT_SET);
    VK_RESULT_STR_CASE(VK_EVENT_RESET);
    VK_RESULT_STR_CASE(VK_INCOMPLETE);
    VK_RESULT_STR_CASE(VK_ERROR_OUT_OF_HOST_MEMORY);
    VK_RESULT_STR_CASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
    VK_RESULT_STR_CASE(VK_ERROR_INITIALIZATION_FAILED);
    VK_RESULT_STR_CASE(VK_ERROR_DEVICE_LOST);
    VK_RESULT_STR_CASE(VK_ERROR_MEMORY_MAP_FAILED);
    VK_RESULT_STR_CASE(VK_ERROR_LAYER_NOT_PRESENT);
    VK_RESULT_STR_CASE(VK_ERROR_EXTENSION_NOT_PRESENT);
    VK_RESULT_STR_CASE(VK_ERROR_FEATURE_NOT_PRESENT);
    VK_RESULT_STR_CASE(VK_ERROR_INCOMPATIBLE_DRIVER);
    VK_RESULT_STR_CASE(VK_ERROR_TOO_MANY_OBJECTS);
    VK_RESULT_STR_CASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
    VK_RESULT_STR_CASE(VK_ERROR_FRAGMENTED_POOL);
    VK_RESULT_STR_CASE(VK_ERROR_UNKNOWN);
    VK_RESULT_STR_CASE(VK_ERROR_OUT_OF_POOL_MEMORY);
    VK_RESULT_STR_CASE(VK_ERROR_INVALID_EXTERNAL_HANDLE);
    VK_RESULT_STR_CASE(VK_ERROR_FRAGMENTATION);
    VK_RESULT_STR_CASE(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
    VK_RESULT_STR_CASE(VK_PIPELINE_COMPILE_REQUIRED);
    VK_RESULT_STR_CASE(VK_ERROR_SURFACE_LOST_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
    VK_RESULT_STR_CASE(VK_SUBOPTIMAL_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_OUT_OF_DATE_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VALIDATION_FAILED_EXT);
    VK_RESULT_STR_CASE(VK_ERROR_INVALID_SHADER_NV);
    VK_RESULT_STR_CASE(VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
    VK_RESULT_STR_CASE(VK_ERROR_NOT_PERMITTED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
    VK_RESULT_STR_CASE(VK_THREAD_IDLE_KHR);
    VK_RESULT_STR_CASE(VK_THREAD_DONE_KHR);
    VK_RESULT_STR_CASE(VK_OPERATION_DEFERRED_KHR);
    VK_RESULT_STR_CASE(VK_OPERATION_NOT_DEFERRED_KHR);
    VK_RESULT_STR_CASE(VK_ERROR_COMPRESSION_EXHAUSTED_EXT);
    VK_RESULT_STR_CASE(VK_RESULT_MAX_ENUM );
    default: return "UNKNOWN VK RESULT VALUE";
  }

  #undef VK_RESULT_STR_CASE
}


#endif //SNOWFLAKE_VULKAN_HPP
